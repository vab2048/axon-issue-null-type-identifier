
#############################################################################################
#                                   Axon specific                                           #
#############################################################################################

###########################
# Serialisers             #
###########################
# Possible values for the serialiser are: `default`, `xstream`, `java`, and `jackson`.

# The `events` serializer is in charge of de-/serializing event messages.
# These are stored in the event store.
axon.serializer.events=jackson

# The `messages` serializer is in charge of de-/serializing the command and query messages used
# in a distributed application set up.
axon.serializer.messages=jackson

# The `general` serializer is in charge of de-/serializing the remainder of Axon objects
# including the tokens, snapshots and sagas. Using jackson forces you to use jackson's
# java bean expectations (getters etc.) whereas xstream does not enforce the same constraints.
# So although xstream is more verbose it is also more flexible.
axon.serializer.general=jackson


################################################
# Application Tracking Event Processors (TEPs) #
################################################
# TEP for the bookState projections
axon.eventhandling.processors.book-projection.mode=tracking

########################################################################################################
#                                      Spring specific                                                 #
# See:                                                                                                 #
# https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html  #
########################################################################################################

# Our application name.
spring.application.name=bug-demo

####################################################################
#  DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties) #
####################################################################
# N.B. With Spring Boot 2, HikariCP is the default DataSource and ConnectionPool.

# Whether to stop if an error occurs while initializing the database.
spring.datasource.continue-on-error=false
# Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
spring.datasource.driver-class-name=org.postgresql.Driver
# Whether to generate a random datasource name.
spring.datasource.generate-unique-name=false
# Name of the datasource. Default to "testdb" when using an embedded database.
#spring.datasource.name=
# Login password of the database.
spring.datasource.password=password
# Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# JDBC URL of the database. ${NAME:default_value} means use the environment variable with the given NAME and
# if it is not present use our default value.
spring.datasource.url=jdbc:postgresql://${DB_HOSTNAME:localhost}:${DB_PORT:5432}/${DB_NAME:bug_example}
# Login username of the database.
spring.datasource.username=postgres

# Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for
# the entire processing of the request. We turn off this anti-pattern behaviour.
# See https://stackoverflow.com/a/48222934/5108875
spring.jpa.open-in-view=false
